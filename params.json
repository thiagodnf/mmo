{"name":"MMO","tagline":"A Free and Open Source Framework for Mono Objective Optimization Problems","body":"Available Metaheuristics\r\n---\r\nThe framework has the following implemented metaheuristics:\r\n\r\n- Random Search\r\n- Hill Climbing\r\n- Steepest Ascent Hill-Climbing\r\n- Differential Evolution\r\n- Genetic Algorithm\r\n\r\nEncoded Problems\r\n---\r\nTo testing the metaheuristics, the following problems were encoded:\r\n\r\n- One Max Problem\r\n- Knapsack Problem\r\n- Ackleys Function\r\n- Two-dimensional Gaussian Function\r\n- Michalewicz Function\r\n- Rosenbrock Function\r\n\r\nOperators\r\n--\r\nThe framework has the following operators:\r\n\r\n**Selection**\r\n- Roulette Wheel\r\n- Binary Tournament\r\n\r\n**Mutation**\r\n- DE/rand/1\r\n- DE/rand/2\r\n- DE/current-to-best/1\r\n- Bit Flip Mutation\r\n- Swap Mutation\r\n\r\n**Crossover**\r\n- Single Point Crossover\r\n- DE Binomial\r\n- DE Exponential\r\n\r\n**Replacement**\r\n- Elitism\r\n- Replace All\r\n\r\nParameters \r\n---\r\nYou can define the metaheuristic's parameters according to your problem before execution. The parameters\r\nshould be defined on operator. For example\r\n\r\n```Java\r\nMetaheuristic m = new DifferentialEvolution(100);\r\n// Set Stopping Criteria\r\nm.setStoppingCriteria(new Iterations(1000));\r\n```\r\n\r\nwhere 100 is a population size and 1000 is the max iterations\r\n\r\nHow to use\r\n---\r\nA example how to use MMO is:\r\n\r\n```Java\r\npublic class GATest {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// Problem\r\n\t\tKnapsackProblem p = new KnapsackProblem(8);\r\n\r\n\t\t// Load instance\r\n\t\tp.setValue(new double[] { 3, 3, 2, 4, 2, 3, 5, 2 });\r\n\t\tp.setWeight(new double[] { 5, 4, 7, 8, 4, 4, 6, 8 });\r\n\t\tp.setMaxWeight(25);\r\n\t\t\r\n\t\t// Metaheuristic\r\n\t\tMetaheuristic m = new GeneticAlgorithm(100);\r\n\t\t\t\t\r\n\t\t// Set Stopping Criteria\r\n\t\tm.setStoppingCriteria(new Iterations(1000));\r\n\r\n\t\t// Run\r\n\t\tExecutionStats.execute(m, p).printStats();\t\t\r\n\t}\r\n}\r\n```\r\n\r\nThe result is:\r\n\r\n```\r\nAlgorithm: GeneticAlgorithm\r\nProblem: KnapsackProblem\r\nExecution time (ms): 423.0\r\nBest Solution Found: [1, 1, 0, 0, 1, 1, 1, 0]\r\nBest Value: -16.0\r\n```\r\n\r\nMotivation\r\n---\r\nThis frawework was developed during the course of Topics in Artificial Intelligence at Federal University of Parana, Brazil.\r\n\r\n\r\n\r\n","google":"UA-46693870-8","note":"Don't delete this file! It's used internally to help with page regeneration."}